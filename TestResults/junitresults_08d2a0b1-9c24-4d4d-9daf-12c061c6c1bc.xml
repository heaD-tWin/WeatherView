<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="3" skipped="0" tests="23" time="2.384" timestamp="2025-07-01T19:55:22.738694+10:00" hostname="DESKTOP-0Q8HRTN"><testcase classname="tests.test_favourites" name="test_load_favourites_file_not_found" file="tests\test_favourites.py" line="10" time="0.003"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_favourites" name="test_load_favourites_json_error" file="tests\test_favourites.py" line="30" time="0.005"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_favourites" name="test_load_favourites_success" file="tests\test_favourites.py" line="20" time="0.003"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_favourites" name="test_save_favourite_add_new_city" file="tests\test_favourites.py" line="42" time="0.005"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_favourites" name="test_save_favourite_empty_city_string" file="tests\test_favourites.py" line="62" time="0.002"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_favourites" name="test_save_favourite_non_string_input" file="tests\test_favourites.py" line="72" time="0.001"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_favourites" name="test_save_favourite_remove_existing_city" file="tests\test_favourites.py" line="52" time="0.004"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_main" name="test_on_close_calls_destroy_and_logs" file="tests\test_main.py" line="24" time="0.003"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_main" name="test_on_select_favourite_triggers_search_and_update" file="tests\test_main.py" line="8" time="0.003"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_create_forecast_figure" file="tests\test_utils.py" line="91" time="0.100"><failure message="AssertionError: assert '5-Day Temperature Forecast for Test City (C)' in '5-Day Temperature Forecast for Test City (°C)'&#10; +  where '5-Day Temperature Forecast for Test City (°C)' = get_title()&#10; +    where get_title = &lt;Axes: title={'center': '5-Day Temperature Forecast for Test City (°C)'}&gt;.get_title">def test_create_forecast_figure():
        """Tests that a matplotlib figure is created with the correct data."""
        # Import locally to avoid collection errors
        import graph_forecast
    
        forecast_data = [
            {"datetime": "2025-07-01 12:00:00", "temperature": 20},
            {"datetime": "2025-07-01 15:00:00", "temperature": 22}
        ]
        fig = graph_forecast.create_forecast_figure(forecast_data, "Test City", "#FFFFFF", "#000000", "#EEEEEE", "metric")
    
        ax = fig.axes[0]
        # Use a simple 'C' to avoid any potential encoding issues
&gt;       assert "5-Day Temperature Forecast for Test City (C)" in ax.get_title()
E       AssertionError: assert '5-Day Temperature Forecast for Test City (C)' in '5-Day Temperature Forecast for Test City (°C)'
E        +  where '5-Day Temperature Forecast for Test City (°C)' = get_title()
E        +    where get_title = &lt;Axes: title={'center': '5-Day Temperature Forecast for Test City (°C)'}&gt;.get_title

tests\test_utils.py:105: AssertionError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_get_user_city_failure" file="tests\test_utils.py" line="126" time="0.002"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_get_user_city_success" file="tests\test_utils.py" line="110" time="0.002"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_on_remove_favourite" file="tests\test_utils.py" line="53" time="0.009"><failure message="AssertionError: Expected 'config' to be called once. Called 0 times.">mock_ui = {'favourites_dropdown': &lt;MagicMock id='1647872139888'&gt;, 'save_button': &lt;MagicMock id='1647872140224'&gt;, 'search_entry': &lt;MagicMock id='1647872139552'&gt;}

    def test_on_remove_favourite(mock_ui):
        """Tests that a city is removed and the UI is updated."""
        with patch("utils.load_favourites", return_value=["London"]), \
             patch("utils.save_favourite") as mock_save, \
             patch("utils.update_fav_button") as mock_update:
    
            # Action
            utils.on_remove_favourite(mock_ui)
    
            # Assertions
            mock_save.assert_called_once_with("London")
            # Verify that the function correctly configured the dropdown with an empty list
&gt;           mock_ui["favourites_dropdown"].config.assert_called_once_with(values=[])

tests\test_utils.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;MagicMock name='mock.config' id='1647871945296'&gt;, args = ()
kwargs = {'values': []}
msg = "Expected 'config' to be called once. Called 0 times."

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
&gt;           raise AssertionError(msg)
E           AssertionError: Expected 'config' to be called once. Called 0 times.

..\..\..\..\AppData\Local\Programs\Python\Python313\Lib\unittest\mock.py:990: AssertionError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_on_save_favourite_new_city" file="tests\test_utils.py" line="27" time="0.004"><failure message="AssertionError: Expected 'config' to be called once. Called 0 times.">mock_ui = {'favourites_dropdown': &lt;MagicMock id='1647871950336'&gt;, 'save_button': &lt;MagicMock id='1647871947312'&gt;, 'search_entry': &lt;MagicMock id='1647871950000'&gt;}

    def test_on_save_favourite_new_city(mock_ui):
        """Tests that a new city is saved and the UI is updated."""
        with patch("utils.load_favourites", return_value=[]), \
             patch("utils.save_favourite") as mock_save, \
             patch("utils.update_fav_button") as mock_update:
    
            # Action
            utils.on_save_favourite(mock_ui)
    
            # Assertions
            mock_save.assert_called_once_with("London")
            # Verify that the function correctly configured the dropdown
&gt;           mock_ui["favourites_dropdown"].config.assert_called_once_with(values=['London'])

tests\test_utils.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;MagicMock name='mock.config' id='1647871949328'&gt;, args = ()
kwargs = {'values': ['London']}
msg = "Expected 'config' to be called once. Called 0 times."

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
&gt;           raise AssertionError(msg)
E           AssertionError: Expected 'config' to be called once. Called 0 times.

..\..\..\..\AppData\Local\Programs\Python\Python313\Lib\unittest\mock.py:990: AssertionError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_set_dynamic_background[clear]" file="tests\test_utils.py" line="70" time="0.003"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_set_dynamic_background[drizzle]" file="tests\test_utils.py" line="70" time="0.004"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_set_dynamic_background[few clouds]" file="tests\test_utils.py" line="70" time="0.004"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_set_dynamic_background[light snow]" file="tests\test_utils.py" line="70" time="0.005"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_set_dynamic_background[mist]" file="tests\test_utils.py" line="70" time="0.003"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_set_dynamic_background[shower rain]" file="tests\test_utils.py" line="70" time="0.004"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_set_dynamic_background[thunderstorms]" file="tests\test_utils.py" line="70" time="0.003"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_set_dynamic_background[unknown condition]" file="tests\test_utils.py" line="70" time="0.003"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_update_fav_button_city_is_favourite" file="tests\test_utils.py" line="42" time="0.002"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase></testsuite></testsuites>