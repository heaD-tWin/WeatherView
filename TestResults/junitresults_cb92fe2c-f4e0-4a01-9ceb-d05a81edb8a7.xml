<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="10" skipped="0" tests="23" time="2.231" timestamp="2025-07-01T19:44:02.449677+10:00" hostname="DESKTOP-0Q8HRTN"><testcase classname="tests.test_favourites" name="test_load_favourites_file_not_found" file="tests\test_favourites.py" line="10" time="0.003"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_favourites" name="test_load_favourites_json_error" file="tests\test_favourites.py" line="30" time="0.005"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_favourites" name="test_load_favourites_success" file="tests\test_favourites.py" line="20" time="0.003"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_favourites" name="test_save_favourite_add_new_city" file="tests\test_favourites.py" line="42" time="0.004"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_favourites" name="test_save_favourite_empty_city_string" file="tests\test_favourites.py" line="62" time="0.002"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_favourites" name="test_save_favourite_non_string_input" file="tests\test_favourites.py" line="72" time="0.001"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_favourites" name="test_save_favourite_remove_existing_city" file="tests\test_favourites.py" line="52" time="0.004"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_main" name="test_on_close_calls_destroy_and_logs" file="tests\test_main.py" line="24" time="0.003"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_main" name="test_on_select_favourite_triggers_search_and_update" file="tests\test_main.py" line="8" time="0.004"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_create_forecast_figure" file="tests\test_utils.py" line="105" time="0.095"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_get_user_city_failure" file="tests\test_utils.py" line="137" time="0.002"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_get_user_city_success" file="tests\test_utils.py" line="120" time="0.002"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_on_remove_favourite" file="tests\test_utils.py" line="63" time="0.009"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_on_save_favourite_new_city" file="tests\test_utils.py" line="40" time="0.004"><failure message="AssertionError: assert 'London' in &lt;MagicMock name='mock.__getitem__()' id='1949771508976'&gt;">mock_ui = {'favourites_dropdown': &lt;MagicMock id='1949771513008'&gt;, 'save_button': &lt;MagicMock id='1949771513344'&gt;, 'search_entry': &lt;MagicMock id='1949771508304'&gt;}

    def test_on_save_favourite_new_city(mock_ui):
        """Tests that a new city is saved and the UI is updated."""
        with patch("utils.load_favourites", return_value=[]), \
             patch("utils.save_favourite") as mock_save, \
             patch("utils.update_fav_button") as mock_update:
    
            utils.on_save_favourite(mock_ui)
    
            mock_save.assert_called_once_with("London")
            mock_ui["favourites_dropdown"]["values"] = ["London"] # Simulate update
&gt;           assert "London" in mock_ui["favourites_dropdown"]["values"]
E           AssertionError: assert 'London' in &lt;MagicMock name='mock.__getitem__()' id='1949771508976'&gt;

tests\test_utils.py:51: AssertionError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_set_dynamic_background[clear-clear]" file="tests\test_utils.py" line="79" time="0.003"><failure message="AttributeError: module 'themes' has no attribute 'bg_colors'">condition = 'clear', expected_category = 'clear'

    @pytest.mark.parametrize("condition, expected_category", [
        ("clear", "clear"),
        ("few clouds", "clouds"),
        ("shower rain", "rain"),
        ("thunderstorms", "thunderstorm"),
        ("light snow", "snow"),
        ("mist", "mist"),
        ("drizzle", "drizzle"),
        ("unknown condition", "default")
    ])
    def test_set_dynamic_background(condition, expected_category):
        """Tests that the correct background color category is chosen."""
        mock_root = MagicMock()
        # Mock the necessary methods for the function to run
        style = MagicMock()
        with patch('themes.ttk.Style', return_value=style):
            bg, dark, light = themes.set_dynamic_background(mock_root, condition)
    
        # Using the actual dictionaries from the themes module for assertion
&gt;       assert bg == themes.bg_colors[expected_category]
                     ^^^^^^^^^^^^^^^^
E       AttributeError: module 'themes' has no attribute 'bg_colors'

tests\test_utils.py:99: AttributeError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_set_dynamic_background[drizzle-drizzle]" file="tests\test_utils.py" line="79" time="0.003"><failure message="AttributeError: module 'themes' has no attribute 'bg_colors'">condition = 'drizzle', expected_category = 'drizzle'

    @pytest.mark.parametrize("condition, expected_category", [
        ("clear", "clear"),
        ("few clouds", "clouds"),
        ("shower rain", "rain"),
        ("thunderstorms", "thunderstorm"),
        ("light snow", "snow"),
        ("mist", "mist"),
        ("drizzle", "drizzle"),
        ("unknown condition", "default")
    ])
    def test_set_dynamic_background(condition, expected_category):
        """Tests that the correct background color category is chosen."""
        mock_root = MagicMock()
        # Mock the necessary methods for the function to run
        style = MagicMock()
        with patch('themes.ttk.Style', return_value=style):
            bg, dark, light = themes.set_dynamic_background(mock_root, condition)
    
        # Using the actual dictionaries from the themes module for assertion
&gt;       assert bg == themes.bg_colors[expected_category]
                     ^^^^^^^^^^^^^^^^
E       AttributeError: module 'themes' has no attribute 'bg_colors'

tests\test_utils.py:99: AttributeError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_set_dynamic_background[few clouds-clouds]" file="tests\test_utils.py" line="79" time="0.003"><failure message="AttributeError: module 'themes' has no attribute 'bg_colors'">condition = 'few clouds', expected_category = 'clouds'

    @pytest.mark.parametrize("condition, expected_category", [
        ("clear", "clear"),
        ("few clouds", "clouds"),
        ("shower rain", "rain"),
        ("thunderstorms", "thunderstorm"),
        ("light snow", "snow"),
        ("mist", "mist"),
        ("drizzle", "drizzle"),
        ("unknown condition", "default")
    ])
    def test_set_dynamic_background(condition, expected_category):
        """Tests that the correct background color category is chosen."""
        mock_root = MagicMock()
        # Mock the necessary methods for the function to run
        style = MagicMock()
        with patch('themes.ttk.Style', return_value=style):
            bg, dark, light = themes.set_dynamic_background(mock_root, condition)
    
        # Using the actual dictionaries from the themes module for assertion
&gt;       assert bg == themes.bg_colors[expected_category]
                     ^^^^^^^^^^^^^^^^
E       AttributeError: module 'themes' has no attribute 'bg_colors'

tests\test_utils.py:99: AttributeError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_set_dynamic_background[light snow-snow]" file="tests\test_utils.py" line="79" time="0.003"><failure message="AttributeError: module 'themes' has no attribute 'bg_colors'">condition = 'light snow', expected_category = 'snow'

    @pytest.mark.parametrize("condition, expected_category", [
        ("clear", "clear"),
        ("few clouds", "clouds"),
        ("shower rain", "rain"),
        ("thunderstorms", "thunderstorm"),
        ("light snow", "snow"),
        ("mist", "mist"),
        ("drizzle", "drizzle"),
        ("unknown condition", "default")
    ])
    def test_set_dynamic_background(condition, expected_category):
        """Tests that the correct background color category is chosen."""
        mock_root = MagicMock()
        # Mock the necessary methods for the function to run
        style = MagicMock()
        with patch('themes.ttk.Style', return_value=style):
            bg, dark, light = themes.set_dynamic_background(mock_root, condition)
    
        # Using the actual dictionaries from the themes module for assertion
&gt;       assert bg == themes.bg_colors[expected_category]
                     ^^^^^^^^^^^^^^^^
E       AttributeError: module 'themes' has no attribute 'bg_colors'

tests\test_utils.py:99: AttributeError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_set_dynamic_background[mist-mist]" file="tests\test_utils.py" line="79" time="0.003"><failure message="AttributeError: module 'themes' has no attribute 'bg_colors'">condition = 'mist', expected_category = 'mist'

    @pytest.mark.parametrize("condition, expected_category", [
        ("clear", "clear"),
        ("few clouds", "clouds"),
        ("shower rain", "rain"),
        ("thunderstorms", "thunderstorm"),
        ("light snow", "snow"),
        ("mist", "mist"),
        ("drizzle", "drizzle"),
        ("unknown condition", "default")
    ])
    def test_set_dynamic_background(condition, expected_category):
        """Tests that the correct background color category is chosen."""
        mock_root = MagicMock()
        # Mock the necessary methods for the function to run
        style = MagicMock()
        with patch('themes.ttk.Style', return_value=style):
            bg, dark, light = themes.set_dynamic_background(mock_root, condition)
    
        # Using the actual dictionaries from the themes module for assertion
&gt;       assert bg == themes.bg_colors[expected_category]
                     ^^^^^^^^^^^^^^^^
E       AttributeError: module 'themes' has no attribute 'bg_colors'

tests\test_utils.py:99: AttributeError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_set_dynamic_background[shower rain-rain]" file="tests\test_utils.py" line="79" time="0.003"><failure message="AttributeError: module 'themes' has no attribute 'bg_colors'">condition = 'shower rain', expected_category = 'rain'

    @pytest.mark.parametrize("condition, expected_category", [
        ("clear", "clear"),
        ("few clouds", "clouds"),
        ("shower rain", "rain"),
        ("thunderstorms", "thunderstorm"),
        ("light snow", "snow"),
        ("mist", "mist"),
        ("drizzle", "drizzle"),
        ("unknown condition", "default")
    ])
    def test_set_dynamic_background(condition, expected_category):
        """Tests that the correct background color category is chosen."""
        mock_root = MagicMock()
        # Mock the necessary methods for the function to run
        style = MagicMock()
        with patch('themes.ttk.Style', return_value=style):
            bg, dark, light = themes.set_dynamic_background(mock_root, condition)
    
        # Using the actual dictionaries from the themes module for assertion
&gt;       assert bg == themes.bg_colors[expected_category]
                     ^^^^^^^^^^^^^^^^
E       AttributeError: module 'themes' has no attribute 'bg_colors'

tests\test_utils.py:99: AttributeError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_set_dynamic_background[thunderstorms-thunderstorm]" file="tests\test_utils.py" line="79" time="0.003"><failure message="AttributeError: module 'themes' has no attribute 'bg_colors'">condition = 'thunderstorms', expected_category = 'thunderstorm'

    @pytest.mark.parametrize("condition, expected_category", [
        ("clear", "clear"),
        ("few clouds", "clouds"),
        ("shower rain", "rain"),
        ("thunderstorms", "thunderstorm"),
        ("light snow", "snow"),
        ("mist", "mist"),
        ("drizzle", "drizzle"),
        ("unknown condition", "default")
    ])
    def test_set_dynamic_background(condition, expected_category):
        """Tests that the correct background color category is chosen."""
        mock_root = MagicMock()
        # Mock the necessary methods for the function to run
        style = MagicMock()
        with patch('themes.ttk.Style', return_value=style):
            bg, dark, light = themes.set_dynamic_background(mock_root, condition)
    
        # Using the actual dictionaries from the themes module for assertion
&gt;       assert bg == themes.bg_colors[expected_category]
                     ^^^^^^^^^^^^^^^^
E       AttributeError: module 'themes' has no attribute 'bg_colors'

tests\test_utils.py:99: AttributeError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_set_dynamic_background[unknown condition-default]" file="tests\test_utils.py" line="79" time="0.003"><failure message="AttributeError: module 'themes' has no attribute 'bg_colors'">condition = 'unknown condition', expected_category = 'default'

    @pytest.mark.parametrize("condition, expected_category", [
        ("clear", "clear"),
        ("few clouds", "clouds"),
        ("shower rain", "rain"),
        ("thunderstorms", "thunderstorm"),
        ("light snow", "snow"),
        ("mist", "mist"),
        ("drizzle", "drizzle"),
        ("unknown condition", "default")
    ])
    def test_set_dynamic_background(condition, expected_category):
        """Tests that the correct background color category is chosen."""
        mock_root = MagicMock()
        # Mock the necessary methods for the function to run
        style = MagicMock()
        with patch('themes.ttk.Style', return_value=style):
            bg, dark, light = themes.set_dynamic_background(mock_root, condition)
    
        # Using the actual dictionaries from the themes module for assertion
&gt;       assert bg == themes.bg_colors[expected_category]
                     ^^^^^^^^^^^^^^^^
E       AttributeError: module 'themes' has no attribute 'bg_colors'

tests\test_utils.py:99: AttributeError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_utils" name="test_update_fav_button_city_is_favourite" file="tests\test_utils.py" line="53" time="0.002"><failure message="AttributeError: module 'pytest' has no attribute 'ANY'">mock_ui = {'favourites_dropdown': &lt;MagicMock id='1949771723984'&gt;, 'save_button': &lt;MagicMock id='1949771724320'&gt;, 'search_entry': &lt;MagicMock id='1949771720624'&gt;}

    def test_update_fav_button_city_is_favourite(mock_ui):
        """Tests that the button shows 'Remove' when the city is a favourite."""
        with patch("utils.load_favourites", return_value=["London"]):
            utils.update_fav_button(mock_ui)
            mock_ui["save_button"].config.assert_called_with(
                text="Remove from Favourites",
&gt;               command=pytest.ANY  # We care about the text, not the exact lambda
                        ^^^^^^^^^^
            )
E           AttributeError: module 'pytest' has no attribute 'ANY'

tests\test_utils.py:60: AttributeError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase></testsuite></testsuites>